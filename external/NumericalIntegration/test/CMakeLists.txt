ADD_EXECUTABLE(generateGaussKronrodQuadrature generateGaussKronrodQuadrature.cpp)
ADD_EXECUTABLE(testComputeNodesWeights testComputeNodesWeights.cpp)
ADD_EXECUTABLE(testIntegrator_InfiniteInterval testIntegrator_InfiniteInterval.cpp)
ADD_EXECUTABLE(testIntegrator_LogPow testIntegrator_LogPow.cpp)
ADD_EXECUTABLE(testIntegrator_Peak testIntegrator_Peak.cpp)
ADD_EXECUTABLE(testIntegrator_Sine testIntegrator_Sine.cpp)
ADD_EXECUTABLE(testNodesAndWeightsByCompare testNodesAndWeightsByCompare.cpp)

TARGET_LINK_LIBRARIES(generateGaussKronrodQuadrature ${ALL_LIBS})
TARGET_LINK_LIBRARIES(testComputeNodesWeights ${ALL_LIBS})
TARGET_LINK_LIBRARIES(testIntegrator_InfiniteInterval ${ALL_LIBS})
TARGET_LINK_LIBRARIES(testIntegrator_LogPow ${ALL_LIBS})
TARGET_LINK_LIBRARIES(testIntegrator_Peak ${ALL_LIBS})
TARGET_LINK_LIBRARIES(testIntegrator_Sine ${ALL_LIBS})
TARGET_LINK_LIBRARIES(testNodesAndWeightsByCompare ${ALL_LIBS})

set(ENABLE_QUANTLIB_COMPARISON FALSE)
if(ENABLE_QUANTLIB_COMPARISON)
    find_package(QuantLib REQUIRED)
    find_package(Boost REQUIRED)
    include_directories(${QuantLib_INCLUDES})
    include_directories(${Boost_INCLUDE_DIRS})
    ADD_EXECUTABLE(testQuantLib testQuantLib.cpp)
    TARGET_LINK_LIBRARIES(testQuantLib ${ALL_LIBS} ${QuantLib_LIBRARIES})
endif(ENABLE_QUANTLIB_COMPARISON)
